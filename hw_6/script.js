"use strict";

// ### NORMAL level

// #### Task 1 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

//     const colors = ['red', 'green', 'blue']
// *************** SOLVE ***************************************
// console.log(colors.length);
// // –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –¥–ª–∏–Ω—É.

// // #### Task 2 üñ•

// // –î–∞–Ω –º–∞—Å—Å–∏–≤:

// *************** SOLVE ***************************************

// const animals = ["monkey", "dog", "cat"];
// let last = animals.pop();
// console.log(last);
// // *************–∏–ª–∏***************
// console.log(animals[animals.length - 1]);
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –¥–ª–∏–Ω–Ω—ã.

// #### Task 3 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// *************** SOLVE ***************************************
// const numbers = [5, 43, 63, 23, 90];
// // console.log(numbers.splice(0, 0));
// // ********** –∏–ª–∏ *********
// console.log(numbers.slice(0,0));

// –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

// > –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.

// #### Task 4 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// const students = ["Polina", "Dasha", "Masha"];
// // *************** SOLVE ***************************************
// students.pop();
// students.push("Borya");
// students.shift();
// students.unshift("Andrey");
// console.log(students);
// + –£–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ `Borya`.
// + –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ `Andrey`.
// + –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.

// #### Task 5 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// const cats = ["Gachito", "Tom", "Batman"];
// // *************** SOLVE ***************************************
// // –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞.
// for (let key of cats) {
//   console.log(key);
// }

// #### Task 6 üñ•

// const evenNumbers = [2, 4, 6, 8, 10];
// const oddNumbers = [1, 3, 5, 7, 9];

// // *************** SOLVE ***************************************
// const joinArray=evenNumbers.concat(oddNumbers)
// console.log(joinArray);
// console.log(joinArray.indexOf(8));
// + –°–æ–µ–¥–∏–Ω–∏—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –≤ –æ–¥–∏–Ω.
// + –í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ **`8`**

// #### Task 7 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// const binary = [0, 0, 0, 0];
// // // *************** SOLVE ***************************************
// console.log(binary.join('1'));
// + –ù–∞—à –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–ª–Ω—ã–π, –≤ –Ω–µ–º —è–≤–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü.
// + –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É.

// > [0, 0, 0, 0] -> '0101010'

// ### ADVANCED level

// > –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª—ã **`for`** –∏–ª–∏ **`for of`**

// #### Task 1 üë®‚Äçüè´

// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.

// *************** SOLVE ***************************************
//********** */ 1—Å–ø–æ—Å–æ–± ****************

let ifPolindrom = "–º–∞–¥–∞–ºq";
let arr=ifPolindrom.split('');
console.log(arr);
let reverseArr=arr.reverse();
console.log(reverseArr);
let newStr=reverseArr.join('');
console.log(ifPolindrom);
console.log(newStr);

if(ifPolindrom==newStr){
    console.log('It is a "Polindrom"! ');
}else{
        console.log('It is not a "Polindrom"! ');
    }

// ********** 2 —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é *******************
// let arr = ifPolindrom.split("");//—Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–≤–æ–∂—É –≤ –º–∞—Å—Å–∏–≤
// console.log(arr);
// let newArr=[];
// let str='';

// function checkPol(obj) {
// for (let i=obj.length; i>=0; i--){
// newArr.push (obj[i]);// –ø—É—à—É –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
// str=newArr.join('');// –Ω–æ–≤—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–≤–æ–∂—É –≤ —Å—Ç—Ä–æ–∫—É 
// console.log(str);
// }
// if(obj==str){
//     console.log('It is a "Polindrom"! ');
// }else{
//     console.log('It is not a "Polindrom"! ');
// }
// }
// checkPol(ifPolindrom);

// #### Task 2 üë®‚Äçüè´

// const matrix = [
//   [12, 98, 78, 65, 23],
//   [54, 76, 98, 43, 65],
//   [13, 324, 65, 312],
//   [9092, 22, 45, 90000],
// ];
// // *************** SOLVE ***************************************
// let newArr = matrix.join(",").split(",");
// console.log(newArr);

// let average = 0;
// for (let i = 0; i < newArr.length; i++) {
//   average += +newArr[i] / newArr.length;
// }
// console.log(average);

// > –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.

// #### Task 3 üë®‚Äçüè´

// –î–∞–Ω –º–∞—Å—Å–∏–≤:
// –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞, –≤ –æ–¥–∏–Ω –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤–∫–ª—é—á–∞—è 0, –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –û–±–∞ –º–∞—Å—Å–∏–≤–∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const mixedNumbers = [-14, 24, -89, 43, 0, -1, 412, 4];
// // *************** SOLVE ***************************************

// let plusArr = [];
// let minusArr = [];
// for (let key of mixedNumbers) {
//   if (key >= 0) {
//     plusArr.push(key);
//   } else {
//     minusArr.push(key);
//   }
// }
// console.log(plusArr);
// console.log(minusArr);

// #### Task 4 üë®‚Äçüè´

// –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 5, –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª. –î–∞–ª–µ–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤–æ–¥–∏—Ç –∏—Ö –≤ –∫—É–± –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤. –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ—Å—Ç–∏ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.

// *************** SOLVE ***************************************
// let arr = [];
// for (let i = 0; i < 5; i++) {
//   arr.push(Math.floor(Math.random() * 100));
// }
// console.log(arr);

// let kubArr = [];
// for (let key of arr) {
//   key = key ** 3;
//   kubArr.push(key);
// }
// console.log(kubArr);
